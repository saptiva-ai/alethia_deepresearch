[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aletheia-deep-research"
version = "0.2.0"
description = "Deep research platform with Saptiva agents and Together AI patterns"
authors = [{ name = "Aletheia Team", email = "team@aletheia.dev" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.11"
keywords = ["research", "ai", "saptiva", "deep-research", "agents"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "pytest-html==4.1.1",
    "pytest-json-report==1.5.0",
    "black==23.11.0",
    "ruff==0.1.6",
    "mypy==1.7.1",
    "bandit==1.7.5",
    "safety==3.2.8",
]

[project.urls]
Homepage = "https://github.com/your-org/aletheia"
Documentation = "https://github.com/your-org/aletheia#readme"
Repository = "https://github.com/your-org/aletheia.git"
"Bug Tracker" = "https://github.com/your-org/aletheia/issues"

[tool.setuptools.packages.find]
include = ["adapters*", "apps*", "domain*", "ports*"]
exclude = [
    "agents*",
    "infra*",
    "runs*",
    "prompts*",
    "tests*",
    "tools*",
    "scripts*",
    "docs*",
    "htmlcov*",
]

# Black Configuration
[tool.black]
line-length = 160
target-version = ['py311']
include = '\\.pyi?$'
exclude = '''
/(\
    \\.eggs\
  | \\.git\
  | \\.hg\
  | \\.mypy_cache\
  | \\.nox\
  | \\.tox\
  | \\.venv\
  | _build\
  | buck-out\
  | build\
  | dist\
  | node_modules\
)/
'''

# Ruff Configuration
[tool.ruff]
target-version = "py311"
line-length = 160
select = [
    "E",
    "W",
    "F",
    "I",
    "B",
    "C4",
    "UP",
    "ARG001",
    "ARG002",
    "ARG003",
    "ARG004",
    "ARG005",
    "N",
    "S",
    "T20",
    "Q",
    "SIM",
    "TID",
]
ignore = [
    "S101",
    "S104",
    "S301",
    "T201",
    "T203",
    "ARG002",
    "N806",
    "N815",
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["ARG001", "ARG002"]
"tests/conftest.py" = ["ARG001", "UP035"]

[tool.ruff.isort]
known-first-party = ["domain", "adapters", "apps", "ports"]
force-sort-within-sections = true

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["tavily.*", "weaviate.*", "yaml.*"]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
    "-ra",
    "--cov=domain",
    "--cov=adapters",
    "--cov=apps",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=50",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "external_api: Tests that require external APIs",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
asyncio_mode = "auto"

# Coverage Configuration
[tool.coverage.run]
source = ["domain", "adapters", "apps"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/migrations/*",
    "venv/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.",
    "class .*\\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit Configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]
