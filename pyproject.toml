[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aletheia-deep-research"
version = "0.2.0"
description = "Deep research platform with Saptiva agents and Together AI patterns"
authors = [{name = "Aletheia Team", email = "team@aletheia.dev"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["research", "ai", "saptiva", "deep-research", "agents"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.urls]
Homepage = "https://github.com/your-org/aletheia"
Documentation = "https://github.com/your-org/aletheia#readme"
Repository = "https://github.com/your-org/aletheia.git"
"Bug Tracker" = "https://github.com/your-org/aletheia/issues"

# Black Configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''

# Ruff Configuration
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "ARG002", # unused-method-argument
    "ARG003", # unused-class-method-argument
    "ARG004", # unused-static-method-argument
    "ARG005", # unused-lambda-argument
    "N",  # pep8-naming
    "S",  # flake8-bandit
    "T20", # flake8-print
    "Q",  # flake8-quotes
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
]
ignore = [
    "S101",   # use of assert detected
    "S104",   # possible binding to all interfaces
    "S301",   # pickle usage
    "T201",   # print usage (allowed in dev)
    "T203",   # pprint usage (allowed in dev)
    "ARG002", # unused method argument (common in abstract methods)
    "N806",   # variable in function should be lowercase (for API responses)
    "N815",   # mixedCase variable in class scope (for API models)
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ARG001", "ARG002"]  # Allow assert and unused args in tests
"**/test_*.py" = ["S101", "ARG001", "ARG002"]
"adapters/*" = ["T201"]  # Allow print in adapters for debugging

[tool.ruff.isort]
known-first-party = ["domain", "adapters", "apps", "ports"]
force-sort-within-sections = true

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "tavily.*",
    "weaviate.*",
    "yaml.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
    "-ra",
    "--cov=domain",
    "--cov=adapters", 
    "--cov=apps",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = [
    "tests",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "external_api: Tests that require external APIs",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
asyncio_mode = "auto"

# Coverage Configuration
[tool.coverage.run]
source = ["domain", "adapters", "apps"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/migrations/*",
    "venv/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit Configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests