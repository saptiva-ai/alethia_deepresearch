name: "CD - Continuous Deployment"

on:
  workflow_run:
    workflows: ["CI - Quality Checks"]
    types:
      - completed
    branches:
      - develop
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-ci-status:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    outputs:
      ci-success: ${{ steps.check.outputs.success }}
    steps:
      - name: Check CI workflow success
        id: check
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" == "success" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "‚ùå CI workflow failed, skipping deployment"
            exit 1
          fi

  build-and-push:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && needs.check-ci-status.outputs.ci-success == 'true') ||
      github.event_name == 'workflow_dispatch'
    needs: check-ci-status
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.image_tag }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.image_tag != 'latest' }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.spdx.json

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: success()
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-development:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: |
      success() &&
      (github.ref == 'refs/heads/develop' ||
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'))
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl for development
        run: |
          echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl cluster-info

      - name: Deploy to development
        run: |
          export KUBECONFIG=kubeconfig
          chmod +x scripts/deployment/deploy.sh
          ./scripts/deployment/deploy.sh \
            --environment development \
            --tag ${{ github.event.inputs.image_tag || 'develop' }} \
            --verbose

      - name: Run smoke tests
        run: |
          export KUBECONFIG=kubeconfig
          echo "üß™ Running smoke tests..."
          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/aletheia -n aletheia-dev

          # Port forward and test
          kubectl port-forward -n aletheia-dev svc/aletheia 8080:80 &
          sleep 10

          # Test health endpoint
          curl -f http://localhost:8080/health || exit 1
          echo "‚úÖ Smoke tests passed"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: |
      success() &&
      (github.ref == 'refs/heads/main' ||
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl for staging
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl cluster-info

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          chmod +x scripts/deployment/deploy.sh
          ./scripts/deployment/deploy.sh \
            --environment staging \
            --tag ${{ github.event.inputs.image_tag || github.sha }} \
            --verbose

      - name: Run integration tests
        run: |
          export KUBECONFIG=kubeconfig
          echo "üß™ Running integration tests..."
          kubectl wait --for=condition=available --timeout=300s deployment/aletheia -n aletheia-staging

          # Test staging endpoints
          STAGING_URL="https://staging.aletheia.yourdomain.com"
          curl -f "$STAGING_URL/health" || exit 1
          curl -f "$STAGING_URL/docs" || exit 1
          echo "‚úÖ Integration tests passed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, deploy-staging]
    if: |
      success() &&
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl for production
        run: |
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl cluster-info

      - name: Pre-deployment validation
        run: |
          export KUBECONFIG=kubeconfig
          echo "üîç Pre-deployment validation..."

          # Check if staging deployment is healthy
          echo "Validating staging deployment..."

          # Validate image tag format (must be semver for production)
          if [[ ! "${{ github.event.inputs.image_tag }}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Production deployments require semver tags (e.g., v1.2.3)"
            exit 1
          fi

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          chmod +x scripts/deployment/deploy.sh
          ./scripts/deployment/deploy.sh \
            --environment production \
            --tag ${{ github.event.inputs.image_tag }} \
            --verbose

      - name: Post-deployment validation
        run: |
          export KUBECONFIG=kubeconfig
          echo "üß™ Post-deployment validation..."
          kubectl wait --for=condition=available --timeout=600s deployment/aletheia -n aletheia-prod

          # Test production endpoints
          PROD_URL="https://aletheia.yourdomain.com"
          curl -f "$PROD_URL/health" || exit 1
          curl -f "$PROD_URL/docs" || exit 1
          echo "‚úÖ Production deployment validated"

      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.image_tag }}
          release_name: Release ${{ github.event.inputs.image_tag }}
          body: |
            üöÄ **Aletheia Deep Research ${{ github.event.inputs.image_tag }}**

            **Deployed to Production**: ‚úÖ
            **Image**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}`
            **Commit**: ${{ github.sha }}

            **Changes:**
            - See commit history for detailed changes

            **Deployment Details:**
            - Environment: Production
            - Namespace: aletheia-prod
            - Health Check: ‚úÖ Passed
          draft: false
          prerelease: false

  notify-deployment:
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-development, deploy-staging, deploy-production]
    steps:
      - name: Send deployment notification
        run: |
          echo "üì¢ Deployment Status Summary"
          echo "============================"

          if [ "${{ needs.deploy-development.result }}" == "success" ]; then
            echo "‚úÖ Development: Deployed successfully"
          elif [ "${{ needs.deploy-development.result }}" == "failure" ]; then
            echo "‚ùå Development: Deployment failed"
          else
            echo "‚ö™ Development: Skipped"
          fi

          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "‚úÖ Staging: Deployed successfully"
          elif [ "${{ needs.deploy-staging.result }}" == "failure" ]; then
            echo "‚ùå Staging: Deployment failed"
          else
            echo "‚ö™ Staging: Skipped"
          fi

          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Production: Deployed successfully"
          elif [ "${{ needs.deploy-production.result }}" == "failure" ]; then
            echo "‚ùå Production: Deployment failed"
          else
            echo "‚ö™ Production: Skipped"
          fi