name: 🚀 CI/CD Pipeline - Aletheia Deep Research

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # 🧪 QUALITY ASSURANCE & TESTING
  # ==========================================
  test:
    name: 🧪 Tests & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      weaviate:
        image: semitechnologies/weaviate:1.22.4
        ports:
          - 8080:8080
        env:
          QUERY_DEFAULTS_LIMIT: 25
          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
          PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
          DEFAULT_VECTORIZER_MODULE: 'none'
          ENABLE_MODULES: ''
          CLUSTER_HOSTNAME: 'node1'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-html pytest-json-report

    - name: 🔍 Code Quality - Linting
      run: |
        pip install ruff black mypy
        echo "🔍 Running Ruff linter..."
        ruff check . --output-format=github
        echo "🎨 Checking code formatting..."
        black --check --diff .
        echo "🔬 Running MyPy type checks..."
        mypy . --ignore-missing-imports || true

    - name: 🛡️ Security Scan
      run: |
        pip install bandit safety
        echo "🛡️ Running Bandit security scan..."
        bandit -r . -f json -o bandit-report.json || true
        echo "🔒 Checking for known vulnerabilities..."
        safety check --json --output safety-report.json || true

    - name: 🧪 Run Test Suite
      env:
        SAPTIVA_API_KEY: ${{ secrets.SAPTIVA_API_KEY_TEST }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY_TEST }}
        WEAVIATE_HOST: http://localhost:8080
        ENVIRONMENT: test
      run: |
        echo "🧪 Running comprehensive test suite..."
        python -m pytest \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --html=test-results.html \
          --json-report --json-report-file=test-results.json \
          --tb=short \
          -v

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: aletheia-coverage

    - name: 📈 Coverage Comment
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}

    - name: 📋 Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-results.html
          test-results.json
          coverage.xml
          htmlcov/
          bandit-report.json
          safety-report.json

  # ==========================================
  # 🏗️ BUILD & PACKAGE
  # ==========================================
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: test
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🐳 Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ github.ref_name }}

    - name: 🔒 Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: 🛡️ Scan Image for Vulnerabilities
      uses: anchore/scan-action@v3
      if: github.event_name != 'pull_request'
      with:
        image: ${{ steps.meta.outputs.tags }}
        fail-build: false
        severity-cutoff: high

  # ==========================================
  # 🚀 DEPLOYMENT
  # ==========================================
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Staging
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        SAPTIVA_API_KEY: ${{ secrets.SAPTIVA_API_KEY_STAGING }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY_STAGING }}
      run: |
        echo "🚀 Deploying Aletheia to staging environment..."
        echo "📦 Image: $IMAGE_TAG"
        # Add your staging deployment commands here
        # kubectl set image deployment/aletheia aletheia=$IMAGE_TAG
        # helm upgrade aletheia ./helm/aletheia --set image.tag=$IMAGE_TAG

    - name: 🧪 Run Smoke Tests
      run: |
        echo "🧪 Running staging smoke tests..."
        # Add health checks and basic functionality tests
        # curl -f https://staging.aletheia.example.com/health

  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🏭 Deploy to Production
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        SAPTIVA_API_KEY: ${{ secrets.SAPTIVA_API_KEY_PROD }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY_PROD }}
      run: |
        echo "🏭 Deploying Aletheia to production environment..."
        echo "📦 Image: $IMAGE_TAG"
        # Add your production deployment commands here
        # kubectl set image deployment/aletheia aletheia=$IMAGE_TAG
        # helm upgrade aletheia ./helm/aletheia --set image.tag=$IMAGE_TAG

    - name: 🧪 Run Production Health Checks
      run: |
        echo "🧪 Running production health checks..."
        # Add comprehensive health checks
        # curl -f https://aletheia.example.com/health

    - name: 📢 Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: |
          sbom.spdx.json
        generate_release_notes: true
        make_latest: true

  # ==========================================
  # 📊 PERFORMANCE & MONITORING
  # ==========================================
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: ⚡ Run Performance Tests
      run: |
        pip install locust pytest-benchmark
        echo "⚡ Running performance benchmarks..."
        python scripts/benchmark_performance.py --environment=staging
        
    - name: 📊 Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results/

  # ==========================================
  # 📝 DOCUMENTATION
  # ==========================================
  docs:
    name: 📝 Generate Documentation  
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Documentation Dependencies
      run: |
        pip install sphinx sphinx-rtd-theme myst-parser
        pip install -r requirements.txt

    - name: 📝 Generate API Documentation
      run: |
        echo "📝 Generating API documentation..."
        # Add sphinx or other doc generation commands
        # sphinx-apidoc -o docs/source .
        # sphinx-build -b html docs/source docs/build

    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/build