name: 🔍 PR Review & Quality Gate

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

jobs:
  # ==========================================
  # 🔍 CODE REVIEW AUTOMATION
  # ==========================================
  code-review:
    name: 🔍 Automated Code Review
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Review Tools
      run: |
        pip install ruff black mypy bandit safety
        pip install -r requirements.txt

    - name: 🔍 Code Quality Check
      run: |
        echo "🔍 Running comprehensive code quality checks..."
        
        # Linting with detailed output
        echo "📋 Linting with Ruff..."
        ruff check . --output-format=github --show-fixes
        
        # Code formatting check
        echo "🎨 Checking code formatting..."
        black --check --diff --color .
        
        # Type checking
        echo "🔬 Type checking with MyPy..."
        mypy . --show-error-codes --ignore-missing-imports
        
        # Security analysis
        echo "🛡️ Security scan with Bandit..."
        bandit -r . -ll -f txt
        
        # Dependency vulnerability check
        echo "🔒 Checking dependencies for vulnerabilities..."
        safety check --short-report

    - name: 📊 Code Complexity Analysis
      run: |
        pip install radon xenon
        echo "📊 Analyzing code complexity..."
        radon cc . --min B --show-complexity
        radon mi . --min B
        xenon . --max-absolute B --max-modules A --max-average A

    - name: 📝 Generate PR Review Summary
      run: |
        echo "## 🔍 Automated Code Review Summary" >> pr-review.md
        echo "" >> pr-review.md
        echo "### ✅ Quality Checks Passed" >> pr-review.md
        echo "- ✅ Code linting (Ruff)" >> pr-review.md
        echo "- ✅ Code formatting (Black)" >> pr-review.md
        echo "- ✅ Type checking (MyPy)" >> pr-review.md
        echo "- ✅ Security scan (Bandit)" >> pr-review.md
        echo "- ✅ Dependency security (Safety)" >> pr-review.md
        echo "- ✅ Code complexity analysis" >> pr-review.md

  # ==========================================
  # 🧪 DIFFERENTIAL TESTING  
  # ==========================================
  diff-testing:
    name: 🧪 Differential Testing
    runs-on: ubuntu-latest
    
    services:
      weaviate:
        image: semitechnologies/weaviate:1.22.4
        ports:
          - 8080:8080
        env:
          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
    
    steps:
    - name: 📥 Checkout PR Branch
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-html pytest-xdist

    - name: 🧪 Run Full Test Suite
      env:
        SAPTIVA_API_KEY: ${{ secrets.SAPTIVA_API_KEY_TEST }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY_TEST }}
        WEAVIATE_HOST: http://localhost:8080
        ENVIRONMENT: test
      run: |
        echo "🧪 Running comprehensive test suite on PR changes..."
        python -m pytest \
          --cov=. \
          --cov-report=xml \
          --cov-report=term-missing \
          --html=pr-test-results.html \
          --tb=short \
          -v \
          -n auto

    - name: 📈 Coverage Comparison
      uses: orgoro/coverage@v3
      with:
        coverageFile: coverage.xml
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Upload PR Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pr-test-results
        path: |
          pr-test-results.html
          coverage.xml

  # ==========================================
  # 🚨 BREAKING CHANGES DETECTION
  # ==========================================
  breaking-changes:
    name: 🚨 Breaking Changes Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Analyze API Changes
      run: |
        echo "🔍 Analyzing potential breaking changes..."
        
        # Check for API endpoint changes
        if git diff origin/main...HEAD --name-only | grep -q "apps/api/main.py"; then
          echo "⚠️ API endpoints may have changed"
          git diff origin/main...HEAD apps/api/main.py
        fi
        
        # Check for model changes
        if git diff origin/main...HEAD --name-only | grep -q "domain/models/"; then
          echo "⚠️ Domain models may have changed"
          git diff origin/main...HEAD domain/models/
        fi
        
        # Check for port interface changes
        if git diff origin/main...HEAD --name-only | grep -q "ports/"; then
          echo "⚠️ Port interfaces may have changed"
          git diff origin/main...HEAD ports/
        fi

    - name: 📝 Breaking Changes Report
      run: |
        echo "## 🚨 Breaking Changes Analysis" >> breaking-changes.md
        echo "" >> breaking-changes.md
        echo "This PR has been analyzed for potential breaking changes." >> breaking-changes.md
        echo "" >> breaking-changes.md
        echo "### Files that could introduce breaking changes:" >> breaking-changes.md
        git diff --name-only origin/main...HEAD | grep -E "(apps/api/|domain/models/|ports/)" || echo "- No critical files modified" >> breaking-changes.md

  # ==========================================
  # 💬 PR FEEDBACK
  # ==========================================
  pr-feedback:
    name: 💬 PR Feedback & Summary
    runs-on: ubuntu-latest
    needs: [code-review, diff-testing, breaking-changes]
    if: always()
    
    steps:
    - name: 📥 Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: pr-test-results
        path: ./results

    - name: 💬 Post PR Comment
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = `## 🤖 Automated PR Review Complete\n\n`;
          comment += `### 📊 Test Results\n`;
          comment += `- **Tests**: ${{ needs.diff-testing.result == 'success' && '✅ Passed' || '❌ Failed' }}\n`;
          comment += `- **Code Quality**: ${{ needs.code-review.result == 'success' && '✅ Passed' || '❌ Failed' }}\n`;
          comment += `- **Breaking Changes**: ${{ needs.breaking-changes.result == 'success' && '✅ None detected' || '⚠️ Potential issues found' }}\n\n`;
          
          comment += `### 🎯 Next Steps\n`;
          if ('${{ needs.diff-testing.result }}' !== 'success') {
            comment += `- ❌ Fix failing tests before merge\n`;
          }
          if ('${{ needs.code-review.result }}' !== 'success') {
            comment += `- ❌ Address code quality issues\n`;
          }
          if ('${{ needs.breaking-changes.result }}' !== 'success') {
            comment += `- ⚠️ Review potential breaking changes\n`;
          }
          if ('${{ needs.diff-testing.result }}' === 'success' && '${{ needs.code-review.result }}' === 'success') {
            comment += `- ✅ Ready for human review and merge!\n`;
          }
          
          comment += `\n---\n*Generated by Aletheia CI/CD Pipeline*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });